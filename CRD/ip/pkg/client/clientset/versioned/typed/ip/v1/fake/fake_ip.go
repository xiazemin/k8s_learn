/*
/*
@Time : 2019/12/23 3:08 下午
@Author : tianpeng.du
@File : types
@Software: GoLand
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	ipv1 "ip/pkg/apis/ip/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIps implements IpInterface
type FakeIps struct {
	Fake *FakeRocduV1
	ns   string
}

var ipsResource = schema.GroupVersionResource{Group: "rocdu.top", Version: "v1", Resource: "ips"}

var ipsKind = schema.GroupVersionKind{Group: "rocdu.top", Version: "v1", Kind: "Ip"}

// Get takes name of the ip, and returns the corresponding ip object, and an error if there is any.
func (c *FakeIps) Get(ctx context.Context, name string, options v1.GetOptions) (result *ipv1.Ip, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(ipsResource, c.ns, name), &ipv1.Ip{})

	if obj == nil {
		return nil, err
	}
	return obj.(*ipv1.Ip), err
}

// List takes label and field selectors, and returns the list of Ips that match those selectors.
func (c *FakeIps) List(ctx context.Context, opts v1.ListOptions) (result *ipv1.IpList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(ipsResource, ipsKind, c.ns, opts), &ipv1.IpList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &ipv1.IpList{ListMeta: obj.(*ipv1.IpList).ListMeta}
	for _, item := range obj.(*ipv1.IpList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested ips.
func (c *FakeIps) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(ipsResource, c.ns, opts))

}

// Create takes the representation of a ip and creates it.  Returns the server's representation of the ip, and an error, if there is any.
func (c *FakeIps) Create(ctx context.Context, ip *ipv1.Ip, opts v1.CreateOptions) (result *ipv1.Ip, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(ipsResource, c.ns, ip), &ipv1.Ip{})

	if obj == nil {
		return nil, err
	}
	return obj.(*ipv1.Ip), err
}

// Update takes the representation of a ip and updates it. Returns the server's representation of the ip, and an error, if there is any.
func (c *FakeIps) Update(ctx context.Context, ip *ipv1.Ip, opts v1.UpdateOptions) (result *ipv1.Ip, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(ipsResource, c.ns, ip), &ipv1.Ip{})

	if obj == nil {
		return nil, err
	}
	return obj.(*ipv1.Ip), err
}

// Delete takes name of the ip and deletes it. Returns an error if one occurs.
func (c *FakeIps) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(ipsResource, c.ns, name), &ipv1.Ip{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIps) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(ipsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &ipv1.IpList{})
	return err
}

// Patch applies the patch and returns the patched ip.
func (c *FakeIps) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *ipv1.Ip, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(ipsResource, c.ns, name, pt, data, subresources...), &ipv1.Ip{})

	if obj == nil {
		return nil, err
	}
	return obj.(*ipv1.Ip), err
}
